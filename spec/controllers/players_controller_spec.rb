require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe PlayersController, type: :controller do

  describe "GET #index" do
    let!(:basketball_player) { create(:basketball_player) }
    let!(:baseball_player) { create(:baseball_player) }
    let!(:football_player) { create(:football_player) }

    it "returns only football players" do
      
      get :index, params: {type: "football"}

      expect(JSON.parse(response.body).count).to eq(1)
    end

    it "returns only baseball players" do
      
      get :index, params: {type: "baseball"}

      expect(JSON.parse(response.body).count).to eq(1)
    end

    it "returns only basketball players" do
      
      get :index, params: {type: "baseball"}

      expect(JSON.parse(response.body).count).to eq(1)
    end
  end
end
